{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "import", "simple-import-sort", "prettier"],
  "extends": [
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "prettier",
    "next/core-web-vitals"
  ],
  "env": {
    "browser": true,
    "es2020": true
  },
  "parserOptions": {
    "project": "./tsconfig.json",
    "sourceType": "module",
    "ecmaVersion": 2020
  },
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": true
    },
    "react": {
      "version": "detect"
    }
  },
  "rules": {
    "@typescript-eslint/no-restricted-types": [
      "warn",
      {
        "types": {
          "Function": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`.",
          "{}": "Avoid using the empty object type `{}`. Prefer `Record<string, unknown>` or a specific object type.",
          "any": "Avoid using `any` type. Use a more specific type or `unknown` instead.",
          "object": "Avoid using `object` type. Use a more specific type, such as `Record<string, unknown>`.",
          "String": "Avoid using `String` wrapper object. Use the primitive `string` instead.",
          "Number": "Avoid using `Number` wrapper object. Use the primitive `number` instead.",
          "Boolean": "Avoid using `Boolean` wrapper object. Use the primitive `boolean` instead.",
          "Symbol": "Avoid using `Symbol` wrapper object. Use the primitive `symbol` instead.",
          "{}[]": "이상한 타입 쓰지마세요"
        }
      }
    ],
    "@typescript-eslint/ban-ts-comment": [
      "error",
      {
        "ts-ignore": "allow-with-description", // 이그노어 하려면 설명해야 함.
        "ts-expect-error": "allow-with-description", // 에러 발생시키는 곳에 쓰며, 쓰려면 설명 써야함
        "ts-nocheck": true, // 노첵 쓰지마
        "ts-check": false // 첵은 가능
      }
    ],
    "@typescript-eslint/consistent-type-imports": [
      "warn",
      {
        "prefer": "type-imports",
        "disallowTypeAnnotations": false,
        "fixStyle": "separate-type-imports"
      }
    ],
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-empty-interface": "warn",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-non-null-assertion": "warn",
    "@typescript-eslint/no-unnecessary-condition": "off",
    "@typescript-eslint/no-unused-vars": "warn",
    "@typescript-eslint/no-inferrable-types": [
      "error",
      { "ignoreParameters": true }
    ],
    "@typescript-eslint/explicit-function-return-type": "off",
    "import/default": ["warn"],
    "import/export": "warn",
    "import/namespace": "warn",
    "import/newline-after-import": "warn",
    "import/no-cycle": "warn",
    "import/no-duplicates": "warn",
    "import/no-named-as-default-member": "warn",
    "import/no-unresolved": "warn",
    "import/no-unused-modules": ["off", { "unusedExports": true }],
    "import/order": [
      "warn",
      {
        "groups": [
          ["builtin", "external"],
          "internal",
          ["parent", "sibling", "index"],
          "object",
          "type"
        ],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],
    "no-redeclare": "warn",
    "no-shadow": "warn",
    "sort-imports": ["warn", { "ignoreDeclarationSort": true }],
    "prefer-const": "warn",
    "simple-import-sort/imports": "off",
    "simple-import-sort/exports": "off"
    // "prettier/prettier": "error"
  },
  "overrides": [
    {
      "files": ["**/*.test.{ts,tsx}"],
      "rules": {
        "@typescript-eslint/no-unnecessary-condition": "warn"
      }
    }
  ]
}
